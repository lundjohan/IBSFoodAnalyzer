// Generated by Dagger (https://google.github.io/dagger).
package com.johanlund.factories;

import com.johanlund.screens.event_activities.mvc_controllers.NewEventActivity;
import com.johanlund.screens.event_activities.mvc_controllers.NewEventActivity_MembersInjector;
import dagger.internal.Preconditions;

public final class DaggerEventFactoryComponent implements EventFactoryComponent {
  private EventFactoryModule eventFactoryModule;

  private DaggerEventFactoryComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static EventFactoryComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.eventFactoryModule = builder.eventFactoryModule;
  }

  @Override
  public void inject(NewEventActivity obj) {
    injectNewEventActivity(obj);
  }

  private NewEventActivity injectNewEventActivity(NewEventActivity instance) {
    NewEventActivity_MembersInjector.injectEventFactory(
        instance,
        EventFactoryModule_ProvidesEventFactoryFactory.proxyProvidesEventFactory(
            eventFactoryModule));
    return instance;
  }

  public static final class Builder {
    private EventFactoryModule eventFactoryModule;

    private Builder() {}

    public EventFactoryComponent build() {
      if (eventFactoryModule == null) {
        this.eventFactoryModule = new EventFactoryModule();
      }
      return new DaggerEventFactoryComponent(this);
    }

    public Builder eventFactoryModule(EventFactoryModule eventFactoryModule) {
      this.eventFactoryModule = Preconditions.checkNotNull(eventFactoryModule);
      return this;
    }
  }
}
