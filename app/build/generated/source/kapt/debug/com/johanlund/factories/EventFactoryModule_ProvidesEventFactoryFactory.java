// Generated by Dagger (https://google.github.io/dagger).
package com.johanlund.factories;

import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class EventFactoryModule_ProvidesEventFactoryFactory implements Factory<EventFactory> {
  private final EventFactoryModule module;

  public EventFactoryModule_ProvidesEventFactoryFactory(EventFactoryModule module) {
    this.module = module;
  }

  @Override
  public EventFactory get() {
    return Preconditions.checkNotNull(
        module.providesEventFactory(), "Cannot return null from a non-@Nullable @Provides method");
  }

  public static EventFactoryModule_ProvidesEventFactoryFactory create(EventFactoryModule module) {
    return new EventFactoryModule_ProvidesEventFactoryFactory(module);
  }

  public static EventFactory proxyProvidesEventFactory(EventFactoryModule instance) {
    return Preconditions.checkNotNull(
        instance.providesEventFactory(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
